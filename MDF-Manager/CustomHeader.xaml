<UserControl x:Class="MDF_Manager.CustomHeader"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
             xmlns:local="clr-namespace:MDF_Manager"
             xmlns:classes="clr-namespace:MDF_Manager.Classes"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             d:DataContext="{d:DesignInstance local:TabHeaderViewModel, IsDesignTimeCreatable=False}">

    <!--     
        Illustrates how to add a custom header, without completely rewriting the DragablzItem header template.
    
        Note that rewriting the DragablzItem header template is a perfectly valid thing to do, but this allows
        customisation of existing templates.    
    -->

    <UserControl.Resources>
        <local:GteConverter x:Key="GteConverter"/>
        <Style x:Key="LeftEllipsesLabelStyle"
       TargetType="{x:Type Label}">
            <Setter Property="Foreground"
            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Background"
            Value="Transparent" />
            <Setter Property="Padding"
            Value="5" />
            <Setter Property="HorizontalContentAlignment"
            Value="Left" />
            <Setter Property="VerticalContentAlignment"
            Value="Top" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Grid >
                            <Grid.Resources>
                                <LinearGradientBrush x:Key="HeaderBackgroundOpacityMask" StartPoint="0,0" EndPoint="1,0">
                                    <GradientStop Color="Black"  Offset="0"/>
                                    <GradientStop Color="Black" Offset="0.5"/>
                                    <GradientStop Color="Transparent" Offset="1"/>
                                </LinearGradientBrush>
                            </Grid.Resources>

                            <Canvas x:Name="Canvas" 
                            ClipToBounds="True" 
                            DockPanel.Dock="Top"  
                            Height="{Binding ElementName=Content, Path=ActualHeight}">

                                <Border 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Canvas.Right="0"
                            Canvas.ZIndex="0"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            MinWidth="{Binding ElementName=Canvas, Path=ActualWidth}"
                            SnapsToDevicePixels="true"
                            x:Name="Content"
                        >
                                    <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Content="{Binding RelativeSource={RelativeSource AncestorType=Label}, Path=Content}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            >
                                        <ContentPresenter.Resources>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type Label}}}"/>
                                                <Setter Property="FontWeight" Value="{Binding FontWeight, RelativeSource={RelativeSource AncestorType={x:Type Label}}}"/>
                                                <Setter Property="FontStyle" Value="{Binding FontStyle, RelativeSource={RelativeSource AncestorType={x:Type Label}}}"/>
                                                <Setter Property="FontFamily" Value="{Binding FontFamily, RelativeSource={RelativeSource AncestorType={x:Type Label}}}"/>
                                            </Style>
                                        </ContentPresenter.Resources>

                                    </ContentPresenter>
                                </Border>
                            </Canvas>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled"
                             Value="false">
                                <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Thumb}" x:Key="InvisibleThumbStyle">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid Background="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid Height="15" ToolTip="{Binding Header}">
        <Label Style="{StaticResource LeftEllipsesLabelStyle}" Content="{Binding Header}" />
        <!-- you should provide your own Thumb, which will be used to monitor dragging -->
        <Thumb Style="{DynamicResource InvisibleThumbStyle}"
                   dragablz:DragablzItem.IsCustomThumb="True" />
    </Grid>
</UserControl>
